<?php

/**
 * PetitionSigning
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    policat
 * @subpackage model
 * @author     Martin
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class PetitionSigning extends BasePetitionSigning {

  const STATUS_PENDING = 1;
  const STATUS_COUNTED = 2;
  const STATUS_BLOCKED = 3;
  const STATUS_DUPLICATE = 4;
  const STATUS_SENT = 5; // waves only

  static $STATUS_SHOW = array(
      self::STATUS_PENDING => 'pending',
      self::STATUS_COUNTED => 'counted',
      self::STATUS_BLOCKED => 'blocked',
      self::STATUS_DUPLICATE => 'duplicate',
  );

  const VALIDATION_KIND_NONE = 0;
  const VALIDATION_KIND_EMAIL = 1;

  static $VALIDATION_KIND_SHOW = array(
      self::VALIDATION_KIND_NONE => 'none',
      self::VALIDATION_KIND_EMAIL => 'email'
  );

  const SUBSCRIBE_NO = 0;
  const SUBSCRIBE_YES = 1;

  static $SUBSCRIBE_SHOW = array
  (
    self::SUBSCRIBE_YES => 'Subscriber',
    self::SUBSCRIBE_NO  => 'Non-subscriber'
  );

  const VERIFIED_NO = 0;
  const VERIFIED_YES = 1;

  static $VERIFIED_SHOW = array
  (
    self::VERIFIED_YES => 'Verified',
    self::VERIFIED_NO  => 'Unverified'
  );

  const MAILEXPORT_PENDING_NO = 0;
  const MAILEXPORT_PENDING_YES = 1;
  const MAILEXPORT_PENDING_DONE = 2;

  public function getStatusName() {
    $status = $this->getStatus();
    return isset(self::$STATUS_SHOW[$status]) ? self::$STATUS_SHOW[$status] : 'unknown';
  }

  public function getField($name, $default = null) {
    if ($name instanceof Formfield || (is_array($name) && isset($name['name']))) {
      $name = $name['name'];
    }

    $value = $this[$name];
    return $value === null ? $default : $value;
  }

  public function setField($name, $value) {
    if ($name instanceof Formfield || (is_array($name) && isset($name['name']))) {
      $name = $name['name'];
    }

    $this[$name] = $value;
  }

  public static function genCode() {
    return mt_rand(10000000000, 99999999999);
  }

  public static function getSecretHash() {
    return sfConfig::get('app_hashes_petition_signing');
  }

  public static function isValidTellcode($tellcode) {
    return UtilIdHash::getInstance(self::getSecretHash())->getIdByHash($tellcode);
  }

  public function getTellcode() {
    return UtilIdHash::getInstance(self::getSecretHash())->getHashById($this->getId());
  }

  public function getEmailContact($override_email = null, $via_tld = false) {
    $name_suffix = '';
    if ($via_tld) {
      $tld = $this->getRefTld();
      if ($tld) {
        $name_suffix = ' via ' . $tld;
      }
    }

    if ($override_email) {
      return array($override_email => $this->getComputedName() . $name_suffix);
    } else {
      return array($this->getField(Petition::FIELD_EMAIL) => $this->getComputedName() . $name_suffix);
    }
  }

  public function getComputedName() {
    $firstname = $this->getFirstname();
    $lastname = $this->getLastname();
    $fullname = $this->getFullname();
    $name = array();
    if (!empty($firstname))
      $name[] = $firstname;
    if (!empty($lastname))
      $name[] = $lastname;
    if (!empty($fullname))
      $name[] = $fullname;
    return join(' ', $name);
  }

  public function getCountryName($culture = 'en') {
    $code = $this->getCountry();
    if (!$code) {
      return '';
    }
    if (!$culture) {
      return $code;
    }
    try {
      return sfCultureInfo::getInstance($culture)->getCountry($code);
    } catch (Exception $e) {
      return $code;
    }
  }

  public function getComputedAddress($culture = 'en', $glue = "\n", $with_country = true, $with_name = true) {
    $address = $this->getField(Petition::FIELD_ADDRESS);
    $postcode = $this->getField(Petition::FIELD_POSTCODE);
    $city = $this->getField(Petition::FIELD_CITY);

    if ($with_name) {
      $ret = $this->getComputedName();
    } else {
      $ret = '';
    }
    if ($address)
      $ret .= ($ret ? $glue : '') . $address;
    if ($city) {
      if ($postcode)
        $ret .= ($ret ? $glue : '') . $postcode . ' ' . $city;
      else
        $ret .= ($ret ? $glue : '') . $city;
    }
    else {
      if ($postcode)
        $ret .= ($ret ? $glue : '') . $postcode;
    }

    if (!$with_country) {
      return $ret;
    }

    $country = $this->getCountryName($culture);
    if ($country) {
      $ret .= $glue . $country;
    }
    return $ret;
  }

  /**
   *
   * @param int $num
   * @return PetitionSigningWave
   */
  public function getWave($num) {
    foreach ($this->getPetitionSigningWave() as $wave) {
      /* @var $wave PetitionSigningWave */
      if ($wave->getWave() == $num)
        return $wave;
    }
    return null;
  }

  public function getSubst($culture = 'en') {
    sfContext::getInstance()->getConfiguration()->loadHelpers(array('Date'));

    return array(
        PetitionSigningTable::KEYWORD_NAME => $this->getComputedName(),
        PetitionSigningTable::KEYWORD_COUNTRY => $this->getCountryName($culture),
        PetitionSigningTable::KEYWORD_ADDRESS => $this->getComputedAddress($culture, "\n", false, false),
        PetitionSigningTable::KEYWORD_EMAIL => $this->getEmail(),
        PetitionSigningTable::KEYWORD_DATE => format_date($this->getCreatedAt(), 'yyyy-MM-dd HH:mm'),
        PetitionSigningTable::KEYWORD_COMMENT => $this->getComment()
    );
  }

  public function getEmailScramble() {
    return UtilScrambleEmail::scramble($this->getEmail());
  }

  public function getEmailHashAuto() {
    return $this->getEmailHash() ? : UtilEmailHash::hash($this->getEmail());
  }

  public function getRefTld() {
    $ref = $this->getField(Petition::FIELD_REF);
    if ($ref) {
      $host = parse_url($ref, PHP_URL_HOST);
      if ($host) {
        $parts = explode('.', $host);
        $count = count($parts);
        if ($count > 1) {
          return $parts[$count - 2] . '.' . $parts[$count - 1];
        }
      }
    }

    return null;
  }

  public function getSignersListEntry($petition, $culture) {
    $with_city = $petition->getLastSigningsCity() && ($petition->getWithAddress() && ($petition->getWithAddress() != 3));
    $with_country = $petition->getLastSigningsCountry() && $petition->getWithCountry();

    $ret = $this->getComputedName();
    $extra = '';

    if ($with_city) {
      $extra = trim($this->getCity());
    }

    if ($with_country) {
      $country = $this->getCountryName($culture);
      if ($country) {
        $extra .= ($extra ? ', ' : '') . $country;
      }
    }

    return $ret . ($extra ? " ($extra)" : '');
  }

  public function addRefCode($pos = null) {
    $ref_code = bin2hex(random_bytes(8));
    $ref_hash = password_hash($ref_code, PASSWORD_DEFAULT);

    $hash = $this->getRefHash();
    $parts = $hash ? explode('; ', $hash) : [];
    $parts[$pos] = $ref_hash;
    $this->setRefHash(implode('; ', $parts));

    return $ref_code;
  }

}
